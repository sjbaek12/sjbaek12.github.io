

ragma solidity ^0.4.0;

contract Coin {
    
    address public minter;
    mapping (address => uint) public balances;

   
    event Sent(address from, address to, uint amount);

   
    function Coin() {
        minter = msg.sender;
    }

    function mint(address receiver, uint amount) {
        if (msg.sender != minter) return;
        balances[receiver] += amount;
    }

    function send(address sender, address receiver, uint amount) {
        if (balances[sender] < amount) return;
        balances[sender] -= amount;
        balances[receiver] += amount;
        Sent(sender, receiver, amount);
    }
}





현재 프로그램은 누구나 화폐의 신규발행이 가능하고 송금도 가능한 구조로 문제가 있음.
따라서 Minter를 msg.sender로 하지 말고,
Minter의 Address를 고정시켜서 Dapp에 적어놓는 것이 필요하다.
Address 정보는 다음과 같다.
-------------------------
white fox
0x31571cc472de911698ef5395934c484296c8befc

Contract Address
0x20fbb640a4ee82f64924ab3efc39ab3a5ef4cc74

sea fox
0xe9db78cb1a5687de016482dcb82e73ca56e82695

Blackcat
0xcd49b13133d47cbad2f8da86f10b98c8940be5c3
-------------------------------------------------





<!DOCTYPE html>

<html>

<head>

  <meta charset="UTF-8">

  <meta http-equiv="CACHE-CONTROL" content="NO-CACHE">

  <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/milligram/1.2.3/milligram.min.css">

  <title>Simple Coin Dapp 예제 0.7</title>

  <style>

    body {margin-left:50px;}

    #storedData {font-size:300%; margin-right:10px;}

    #newValue {width: 200px; margin-right:10px; text-align:right;}

  </style>

</head>

<body>

<h3>Coin 발행 및 이체 0.27</h3>

<ul>

  <li>컨트랙트 주소: <span id="ContractAddr"></span></li>

  <li>내 어카운트 주소:  <input id="MyaccountAddr" type="text" style=width:500px;></li>

  <li>수신자 주소 : <input id="ReceiverAddr" type="text" style=width:500px;></li>

  <li>신규 발행액 : <input id="NewCurrency" type="number" style=width:500px;>

      <button onclick="setValue()">신규 발행</button>

      <div id="result"></div></li>

 <li> 송금 금액 : <input id="MoneyTransfer" type="number" style=width:500px;>

      <button onclick="transValue()">송금확인</button></li>

 <li>나 의  잔 고: <span id="MyBalance"></span>

    <button onclick="MyValue()">내 잔고 확인</button> (현재블록: <span id="lastBlock1"></span>)</li>

  <li>수신자 잔고: <span id="ReceiverBalance"></span>

    <button onclick="getValue()">잔고확인</button> (현재블록: <span id="lastBlock"></span>)</li>



</ul>






</body>

<script src="https://cdn.rawgit.com/ethereum/web3.js/develop/dist/web3.js"></script>

<!-- script src="https://code.jquery.com/jquery-3.1.1.slim.min.js"></script -->

<script>

var ContractAddress = '0x20fbb640a4ee82f64924ab3efc39ab3a5ef4cc74';

var abi = [{"constant":true,"inputs":[],"name":"minter","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"sender","type":"address"},{"name":"receiver","type":"address"},{"name":"amount","type":"uint256"}],"name":"send","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"balances","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"receiver","type":"address"},{"name":"amount","type":"uint256"}],"name":"mint","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"name":"from","type":"address"},{"indexed":false,"name":"to","type":"address"},{"indexed":false,"name":"amount","type":"uint256"}],"name":"Sent","type":"event"}];

var simcoincontract;

var simcoin;


window.addEventListener('load', function() {


  // Checking if Web3 has been injected by the browser (Mist/MetaMask)

  if (typeof web3 !== 'undefined') {

    // Use Mist/MetaMask's provider

    window.web3 = new Web3(web3.currentProvider);

  } else {

    console.log('No web3? You should consider trying MetaMask!')

    // fallback - use your fallback strategy (local node / hosted node + in-dapp id mgmt / fail)

    window.web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:8545"));

  }

  // Now you can start your app & access web3 freely:

  startApp();

});




function startApp() {

  simcoincontract = web3.eth.contract(abi);

  simcoin = simcoincontract.at(ContractAddress);

  document.getElementById('ContractAddr').innerHTML = ContractAddress;

  web3.eth.getAccounts(function(e,r){

    document.getElementById('MyaccountAddr').innerHTML = getLink(r[0]);

  });

}


function getValue() {

    var ReceiverAcc = document.getElementById("ReceiverAddr").value;

    simcoin.balances.call(ReceiverAcc, function(e,r){ k = r.toNumber()});

    document.getElementById('ReceiverBalance').innerHTML = k;

    web3.eth.getBlockNumber(function(e,r){document.getElementById('lastBlock').innerHTML = r;});

}




function setValue() {


  var ReceiverAcc = document.getElementById("ReceiverAddr").value;

  var NewCur = document.getElementById("NewCurrency").value;

  var txid

  simcoin.mint(ReceiverAcc, NewCur, function(e,r){

     txid = r;

   });

}

 
 function transValue() {


  var MyAcc = document.getElementById("MyaccountAddr").value;  

  var ReceiverAcc = document.getElementById("ReceiverAddr").value;

  var MoneyTrans = document.getElementById("MoneyTransfer").value;

  simcoin.send(MyAcc, ReceiverAcc, MoneyTrans, function(e,r){ txid = r; });

  
}



  function MyValue() {

    var MyAcc = document.getElementById("MyaccountAddr").value;

    simcoin.balances.call(MyAcc, function(e,r){k = r.toNumber()});

    document.getElementById('MyBalance').innerHTML = k;

     web3.eth.getBlockNumber(function(e,r){document.getElementById('lastBlock1').innerHTML = r;});

    }






</script>

</html>

